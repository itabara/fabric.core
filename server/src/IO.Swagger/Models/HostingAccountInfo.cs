/*
 * Wish Fabric Api - Middleware to Fabric
 *
 * Wish Fabric API (Integration)
 *
 * OpenAPI spec version: 1.0.1
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class HostingAccountInfo :  IEquatable<HostingAccountInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HostingAccountInfo" /> class.
        /// </summary>
        /// <param name="HostingAccountId">Fabric hosting_acount_id (PK) (required).</param>
        /// <param name="HostingName">hosting account (primary domain).</param>
        /// <param name="FtpQuota">FtpQuota.</param>
        /// <param name="DiskQuota">DiskQuota.</param>
        /// <param name="BandwidthQuota">BandwidthQuota.</param>
        /// <param name="StatsJsonUrl">json endpoint to for chart data.</param>
        public HostingAccountInfo(long? HostingAccountId = null, string HostingName = null, QuotaInfo FtpQuota = null, QuotaInfo DiskQuota = null, QuotaInfo BandwidthQuota = null, string StatsJsonUrl = null)
        {
            // to ensure "HostingAccountId" is required (not null)
            if (HostingAccountId == null)
            {
                throw new InvalidDataException("HostingAccountId is a required property for HostingAccountInfo and cannot be null");
            }
            else
            {
                this.HostingAccountId = HostingAccountId;
            }
            this.HostingName = HostingName;
            this.FtpQuota = FtpQuota;
            this.DiskQuota = DiskQuota;
            this.BandwidthQuota = BandwidthQuota;
            this.StatsJsonUrl = StatsJsonUrl;
            
        }

        /// <summary>
        /// Fabric hosting_acount_id (PK)
        /// </summary>
        /// <value>Fabric hosting_acount_id (PK)</value>
        [DataMember(Name="hosting_account_id")]
        public long? HostingAccountId { get; set; }

        /// <summary>
        /// hosting account (primary domain)
        /// </summary>
        /// <value>hosting account (primary domain)</value>
        [DataMember(Name="hosting_name")]
        public string HostingName { get; set; }

        /// <summary>
        /// Gets or Sets FtpQuota
        /// </summary>
        [DataMember(Name="ftp_quota")]
        public QuotaInfo FtpQuota { get; set; }

        /// <summary>
        /// Gets or Sets DiskQuota
        /// </summary>
        [DataMember(Name="disk_quota")]
        public QuotaInfo DiskQuota { get; set; }

        /// <summary>
        /// Gets or Sets BandwidthQuota
        /// </summary>
        [DataMember(Name="bandwidth_quota")]
        public QuotaInfo BandwidthQuota { get; set; }

        /// <summary>
        /// json endpoint to for chart data
        /// </summary>
        /// <value>json endpoint to for chart data</value>
        [DataMember(Name="stats_json_url")]
        public string StatsJsonUrl { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HostingAccountInfo {\n");
            sb.Append("  HostingAccountId: ").Append(HostingAccountId).Append("\n");
            sb.Append("  HostingName: ").Append(HostingName).Append("\n");
            sb.Append("  FtpQuota: ").Append(FtpQuota).Append("\n");
            sb.Append("  DiskQuota: ").Append(DiskQuota).Append("\n");
            sb.Append("  BandwidthQuota: ").Append(BandwidthQuota).Append("\n");
            sb.Append("  StatsJsonUrl: ").Append(StatsJsonUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((HostingAccountInfo)obj);
        }

        /// <summary>
        /// Returns true if HostingAccountInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of HostingAccountInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HostingAccountInfo other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.HostingAccountId == other.HostingAccountId ||
                    this.HostingAccountId != null &&
                    this.HostingAccountId.Equals(other.HostingAccountId)
                ) && 
                (
                    this.HostingName == other.HostingName ||
                    this.HostingName != null &&
                    this.HostingName.Equals(other.HostingName)
                ) && 
                (
                    this.FtpQuota == other.FtpQuota ||
                    this.FtpQuota != null &&
                    this.FtpQuota.Equals(other.FtpQuota)
                ) && 
                (
                    this.DiskQuota == other.DiskQuota ||
                    this.DiskQuota != null &&
                    this.DiskQuota.Equals(other.DiskQuota)
                ) && 
                (
                    this.BandwidthQuota == other.BandwidthQuota ||
                    this.BandwidthQuota != null &&
                    this.BandwidthQuota.Equals(other.BandwidthQuota)
                ) && 
                (
                    this.StatsJsonUrl == other.StatsJsonUrl ||
                    this.StatsJsonUrl != null &&
                    this.StatsJsonUrl.Equals(other.StatsJsonUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.HostingAccountId != null)
                    hash = hash * 59 + this.HostingAccountId.GetHashCode();
                if (this.HostingName != null)
                    hash = hash * 59 + this.HostingName.GetHashCode();
                if (this.FtpQuota != null)
                    hash = hash * 59 + this.FtpQuota.GetHashCode();
                if (this.DiskQuota != null)
                    hash = hash * 59 + this.DiskQuota.GetHashCode();
                if (this.BandwidthQuota != null)
                    hash = hash * 59 + this.BandwidthQuota.GetHashCode();
                if (this.StatsJsonUrl != null)
                    hash = hash * 59 + this.StatsJsonUrl.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(HostingAccountInfo left, HostingAccountInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HostingAccountInfo left, HostingAccountInfo right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
