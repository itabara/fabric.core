/*
 * Wish Fabric Api - Middleware to Fabric
 *
 * Wish Fabric API (Integration)
 *
 * OpenAPI spec version: 1.0.1
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class HostingAccountApiController : Controller
    { 

        /// <summary>
        /// Query database info
        /// </summary>
        /// <remarks>Retrieve database specific details </remarks>
        /// <param name="authorization">Access token</param>
        /// <param name="packageId">Server package instance id</param>
        /// <param name="hostingAccountId">Hosting account unique id (PK). Cannot be changed.</param>
        /// <param name="databaseName">Database name</param>
        /// <response code="200">Database details</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Invalid authorization token</response>
        /// <response code="404">Hosting account not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/provisioning/package/{package_id}/hosting/{hosting_account_id}/database/{database_name}")]
        [SwaggerOperation("ProvisioningPackagePackageIdHostingHostingAccountIdDatabaseDatabaseNameGet")]
        [SwaggerResponse(200, type: typeof(DatabaseInfo))]
        public virtual IActionResult ProvisioningPackagePackageIdHostingHostingAccountIdDatabaseDatabaseNameGet([FromHeader]string authorization, [FromRoute]long? packageId, [FromRoute]int? hostingAccountId, [FromRoute]string databaseName)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DatabaseInfo>(exampleJson)
            : default(DatabaseInfo);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete hosting account
        /// </summary>
        /// <remarks>This will remove the hosting account details. AD entries are removed. Webspace data are moved to /backup/&lt;snapshot&gt; for x days and removed from original location. IIS details are removed. Optional LB info removed (ssl). Additional ftp users removed/disabled. Log files into /backup/snapshot/logs/archive. </remarks>
        /// <param name="authorization">Access token</param>
        /// <param name="packageId">Server package instance id</param>
        /// <param name="hostingAccountId">Hosting account unique id (PK). Cannot be changed.</param>
        /// <response code="202">Request is accepted and FabricTask &#39;_utid&#39; is returned</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Invalid authorization token</response>
        /// <response code="404">Hosting account not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/provisioning/package/{package_id}/hosting/{hosting_account_id}")]
        [SwaggerOperation("ProvisioningPackagePackageIdHostingHostingAccountIdDelete")]
        [SwaggerResponse(200, type: typeof(FabricTask))]
        public virtual IActionResult ProvisioningPackagePackageIdHostingHostingAccountIdDelete([FromHeader]string authorization, [FromRoute]long? packageId, [FromRoute]int? hostingAccountId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FabricTask>(exampleJson)
            : default(FabricTask);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Retrieve hosting account details
        /// </summary>
        /// <remarks>Retrives hosting details </remarks>
        /// <param name="authorization">Access token</param>
        /// <param name="packageId">Server package instance id</param>
        /// <param name="hostingAccountId">Hosting account unique id (PK). Cannot be changed.</param>
        /// <response code="200">HostingAccount details</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Invalid authorization token</response>
        /// <response code="404">Hosting account not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/provisioning/package/{package_id}/hosting/{hosting_account_id}")]
        [SwaggerOperation("ProvisioningPackagePackageIdHostingHostingAccountIdGet")]
        [SwaggerResponse(200, type: typeof(HostingAccountInfo))]
        public virtual IActionResult ProvisioningPackagePackageIdHostingHostingAccountIdGet([FromHeader]string authorization, [FromRoute]long? packageId, [FromRoute]int? hostingAccountId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<HostingAccountInfo>(exampleJson)
            : default(HostingAccountInfo);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Allow disk quotas change. Potentially to be used to move HostingAccount to another cluster.
        /// </summary>
        
        /// <param name="authorization">Access token</param>
        /// <param name="packageId">Server package instance id</param>
        /// <param name="hostingAccountId">Hosting account unique id (PK). Cannot be changed.</param>
        /// <param name="hostingInfo">The hosting account details to be updated.</param>
        /// <response code="202">Request is accepted and FabricTask &#39;_utid&#39; is returned</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Invalid authorization token</response>
        /// <response code="404">Hosting account not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/provisioning/package/{package_id}/hosting/{hosting_account_id}")]
        [SwaggerOperation("ProvisioningPackagePackageIdHostingHostingAccountIdPut")]
        [SwaggerResponse(200, type: typeof(FabricTask))]
        public virtual IActionResult ProvisioningPackagePackageIdHostingHostingAccountIdPut([FromHeader]string authorization, [FromRoute]long? packageId, [FromRoute]int? hostingAccountId, [FromBody]HostingAccount hostingInfo)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FabricTask>(exampleJson)
            : default(FabricTask);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Retrive HostingAccount status
        /// </summary>
        /// <remarks>Get the status of HostingAccount </remarks>
        /// <param name="authorization">Access token</param>
        /// <param name="packageId">Server package instance id</param>
        /// <param name="hostingAccountId">Hosting account unique id (PK). Cannot be changed.</param>
        /// <response code="200">Retrieve HostingAccount status</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Invalid authorization token</response>
        /// <response code="404">Hosting account not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/provisioning/package/{package_id}/hosting/{hosting_account_id}/status")]
        [SwaggerOperation("ProvisioningPackagePackageIdHostingHostingAccountIdStatusGet")]
        [SwaggerResponse(200, type: typeof(HostingAccountStatus))]
        public virtual IActionResult ProvisioningPackagePackageIdHostingHostingAccountIdStatusGet([FromHeader]string authorization, [FromRoute]long? packageId, [FromRoute]int? hostingAccountId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<HostingAccountStatus>(exampleJson)
            : default(HostingAccountStatus);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Enable/Disable the HostingAccount
        /// </summary>
        /// <remarks>It enable/disable the HostingAccount </remarks>
        /// <param name="authorization">Access token</param>
        /// <param name="packageId">Server package instance id</param>
        /// <param name="hostingAccountId">Hosting account unique id (PK). Cannot be changed.</param>
        /// <param name="status">change hosting account status (enable/disable)</param>
        /// <param name="comments">Description/reason of change status action</param>
        /// <response code="202">Request is accepted and FabricTask &#39;_utid&#39; is returned</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Invalid authorization token</response>
        /// <response code="404">Hosting account not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/provisioning/package/{package_id}/hosting/{hosting_account_id}/status")]
        [SwaggerOperation("ProvisioningPackagePackageIdHostingHostingAccountIdStatusPut")]
        [SwaggerResponse(200, type: typeof(FabricTask))]
        public virtual IActionResult ProvisioningPackagePackageIdHostingHostingAccountIdStatusPut([FromHeader]string authorization, [FromRoute]long? packageId, [FromRoute]int? hostingAccountId, [FromForm]string status, [FromForm]string comments)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FabricTask>(exampleJson)
            : default(FabricTask);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Provision a hosting account instance
        /// </summary>
        /// <remarks>This will create a hosting account instance. </remarks>
        /// <param name="authorization">Access token</param>
        /// <param name="packageId">Server package instance id</param>
        /// <param name="hostingAccount">The hosting account details with package quotas.</param>
        /// <response code="202">Request is accepted and FabricTask &#39;_utid&#39; is returned</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Invalid authorization token</response>
        /// <response code="409">An existing &#39;hosting_name&#39; already exists</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/provisioning/package/{package_id}/hosting")]
        [SwaggerOperation("ProvisioningPackagePackageIdHostingPost")]
        [SwaggerResponse(200, type: typeof(FabricTask))]
        public virtual IActionResult ProvisioningPackagePackageIdHostingPost([FromHeader]string authorization, [FromRoute]long? packageId, [FromBody]HostingAccount hostingAccount)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FabricTask>(exampleJson)
            : default(FabricTask);
            return new ObjectResult(example);
        }
    }
}
