---
swagger: "2.0"
info:
  description: "Wish Fabric.Core API"
  version: "1.0.0"
  title: "Wish Fabric.Core Api - Middleware to Fabric.Core"
  contact:
    email: "you@your-company.com"
host: "fabric-core.heg-development.com"
tags:
- name: "HostingAccount"
- name: "Ftp"
- name: "Backup"
- name: "Database"
- name: "DatabaseBackup"
- name: "DatabaseUsers"
- name: "Misc"
- name: "HealthCheck"
schemes:
- "https"
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /provisioning/hosting:
    post:
      tags:
      - "HostingAccount"
      summary: "Provision a hosting account"
      description: "This will search for an active provision engine and launch a task\
        \ to provision a hosting account with specified parameters."
      operationId: "createHosting"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - in: "body"
        name: "hostingAccount"
        description: "The hosting account details with package quotas."
        required: false
        schema:
          $ref: "#/definitions/hostingAccount"
      responses:
        202:
          description: "Request is accepted and FabricTask is returned"
          schema:
            $ref: "#/definitions/FabricTask"
        400:
          description: "Invalid input, object invalid"
        401:
          description: "Invalid authorization token"
        409:
          description: "An existing 'hosting_name' already exists"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "HostingAccount"
  /provisioning/hosting/{hosting_name}:
    get:
      tags:
      - "HostingAccount"
      summary: "Retrieve hosting account details"
      description: "Retrives hosting account details\n"
      operationId: "getHosting"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      responses:
        200:
          description: "HostingAccount details"
          schema:
            $ref: "#/definitions/HostingAccount"
        401:
          description: "Invalid authorization token"
        404:
          description: "Failed to get hosting account"
      x-swagger-router-controller: "HostingAccount"
    put:
      tags:
      - "HostingAccount"
      summary: "Edit hosting account"
      description: "Allow changing of hosting account quotas. Potentially to be used\
        \ to move HostingAccount to another cluster/region."
      operationId: "provisioningHostingHosting_namePUT"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account name (primary domain)"
        required: true
        type: "string"
      - in: "body"
        name: "hosting_account"
        description: "The hosting account details with package quotas."
        required: false
        schema:
          $ref: "#/definitions/hosting_account"
      responses:
        202:
          description: "FabricTask task details"
          schema:
            $ref: "#/definitions/FabricTask"
        401:
          description: "Invalid authorization token"
        404:
          description: "Failed to get hosting account"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "HostingAccount"
    delete:
      tags:
      - "HostingAccount"
      summary: "Delete hosting account"
      description: "This will remove the hosting account.\n"
      operationId: "provisioningHostingHosting_nameDELETE"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account name (primary domain)"
        required: true
        type: "string"
      responses:
        202:
          description: "FabricTask task details"
          schema:
            $ref: "#/definitions/FabricTask"
        401:
          description: "Invalid authorization token"
        404:
          description: "Failed to get hosting account"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "HostingAccount"
  /provisioning/hosting/{hosting_name}/status:
    get:
      tags:
      - "HostingAccount"
      summary: "Retrive HostingAccount status"
      description: "Get the status of HostingAccount\n"
      operationId: "getHostingStatus"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      responses:
        200:
          description: "Retrieve HostingAccount status"
          schema:
            $ref: "#/definitions/HostingAccountStatus"
        401:
          description: "Invalid authorization token"
        404:
          description: "Failed to get hosting account"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "HostingAccount"
    put:
      tags:
      - "HostingAccount"
      summary: "Enable/Disable the HostingAccount"
      description: "It enable/disable the HostingAccount\n"
      operationId: "setHostingStatus"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      - in: "body"
        name: "status"
        description: "change hosting account status (enable/disable)"
        required: true
        schema:
          $ref: "#/definitions/HostingAccountStatus"
      responses:
        200:
          description: "Change HostingAccount status"
          schema:
            $ref: "#/definitions/FabricTask"
        401:
          description: "Invalid authorization token"
        404:
          description: "Failed to get hosting account"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "HostingAccount"
  /provisioning/hosting/{hosting_name}/ftp:
    get:
      tags:
      - "Ftp"
      summary: "Retrive the list of ftp accounts"
      description: "The list of ftp account info\n"
      operationId: "provisioningHostingHosting_nameFtpGET"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      responses:
        200:
          description: "Array of FtpUserInfo"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FtpUserInfo"
        401:
          description: "Invalid authorization token"
        404:
          description: "Failed to get hosting account"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Ftp"
    post:
      tags:
      - "Ftp"
      summary: "Create a ftp user for current HostingAccount"
      description: "Create a ftp user with required parameters\n"
      operationId: "createFtpUser"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      - in: "body"
        name: "ftpUser"
        description: "The ftp details"
        required: false
        schema:
          $ref: "#/definitions/ftpUser"
      responses:
        202:
          description: "FabricTask for FTPUserInfo edit"
          schema:
            $ref: "#/definitions/FabricTask"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting not found"
        409:
          description: "An existing ftp 'username' already exists"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Ftp"
  /provisioning/hosting/{hosting_name}/ftp/{username}:
    get:
      tags:
      - "Ftp"
      summary: "Get ftp user"
      description: "Retrieves ftp user account details\n"
      operationId: "getFtpUser"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      - name: "username"
        in: "path"
        description: "current Ftp username"
        required: true
        type: "string"
      responses:
        200:
          description: "Retrieve the ftp details"
          schema:
            $ref: "#/definitions/FtpUserInfo"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting or ftpuser not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Ftp"
    put:
      tags:
      - "Ftp"
      summary: "Edit ftp user details"
      description: "Edit ftp user. Cannot edit username.\n"
      operationId: "editFtpUser"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      - name: "username"
        in: "path"
        description: "current Ftp username"
        required: true
        type: "string"
      - in: "body"
        name: "ftpUser"
        description: "The ftp details"
        required: false
        schema:
          $ref: "#/definitions/ftpUser_1"
      responses:
        202:
          description: "FabricTask for FTPUserInfo edit"
          schema:
            $ref: "#/definitions/FabricTask"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting or ftpuser not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Ftp"
    delete:
      tags:
      - "Ftp"
      summary: "Delete ftp user"
      description: "It will remove the ftp user. Cannot remove primary ftp account\
        \ (admin@hosting_name)\n"
      operationId: "deleteFtpUser"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      - name: "username"
        in: "path"
        description: "current Ftp username"
        required: true
        type: "string"
      responses:
        202:
          description: "FabricTask for FTPUserInfo delete"
          schema:
            $ref: "#/definitions/FabricTask"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting or ftpuser not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Ftp"
  /provisioning/hosting/{hosting_name}/database:
    get:
      tags:
      - "Database"
      summary: "Retrieve hosting account databases list"
      description: "Retrives the list of provisioned databases with details\n"
      operationId: "provisioningHostingHosting_nameDatabaseGET"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      responses:
        200:
          description: "Array of DatabaseInfo"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DatabaseInfo"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting or ftpuser not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Database"
    post:
      tags:
      - "Database"
      summary: "Provision a database to the hosting database cluster"
      description: "Create a database instance with required parameters. We assume\
        \ a group of WebClusters will have own database cluster.\n"
      operationId: "createDatabase"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      - in: "body"
        name: "database_info"
        description: "The database details."
        required: false
        schema:
          $ref: "#/definitions/database_info"
      responses:
        202:
          description: "Create a database instance"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FabricTask"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting not found"
        409:
          description: "An existing database already exists"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Database"
  /provisioning/hosting/{hosting_name}/database/{database_name}:
    get:
      tags:
      - "Database"
      summary: "Query database info"
      description: "Retrieve database specific details\n"
      operationId: "provisioningHostingHosting_nameDatabaseDatabase_nameGET"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      - name: "database_name"
        in: "path"
        description: "Database identifier"
        required: true
        type: "string"
      responses:
        200:
          description: "Database details"
          schema:
            $ref: "#/definitions/DatabaseInfo"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting or database not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Database"
    put:
      tags:
      - "Database"
      summary: "Edit database details"
      description: "Edit database details.\n"
      operationId: "provisioningHostingHosting_nameDatabaseDatabase_namePUT"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "Hosting account (primary domain)"
        required: true
        type: "string"
      - name: "database_name"
        in: "path"
        description: "Database name"
        required: true
        type: "string"
      - in: "body"
        name: "databaseInfo"
        description: "The database details to be updated"
        required: false
        schema:
          $ref: "#/definitions/databaseInfo"
      responses:
        200:
          description: "Database details edit"
          schema:
            $ref: "#/definitions/FabricTask"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting or database not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Database"
    delete:
      tags:
      - "Database"
      summary: "Remove database"
      description: "It will remove the database and move it to snapshot for 30 days.\n"
      operationId: "provisioningHostingHosting_nameDatabaseDatabase_nameDELETE"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "Hosting account (primary domain)"
        required: true
        type: "string"
      - name: "database_name"
        in: "path"
        description: "Database name"
        required: true
        type: "string"
      responses:
        202:
          description: "Database delete"
          schema:
            $ref: "#/definitions/FabricTask"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting or database not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Database"
  /provisioning/hosting/{hosting_name}/database/{database_name}/backups:
    get:
      tags:
      - "DatabaseBackup"
      summary: "Get database backups"
      description: "Get the available backups for the database"
      operationId: "provisioningHostingHosting_nameDatabaseDatabase_nameBackupsGET"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "Hosting account (primary domain)"
        required: true
        type: "string"
      - name: "database_name"
        in: "path"
        description: "Database name"
        required: true
        type: "string"
      responses:
        200:
          description: "Backup current database"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BackupInfo"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting or database not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "DatabaseBackup"
    post:
      tags:
      - "DatabaseBackup"
      summary: "Backup specified database"
      description: "Create a database backup with required parameters. The platform\
        \ will store the backup file and provide relative path from customer webspace.\n"
      operationId: "backupDatabase"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      - name: "database_name"
        in: "path"
        description: "Database name"
        required: true
        type: "string"
      responses:
        202:
          description: "Backup specified database"
          schema:
            $ref: "#/definitions/FabricTask"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting or database not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "DatabaseBackup"
  /provisioning/hosting/{hosting_name}/database/{database_name}/restores:
    get:
      tags:
      - "DatabaseBackup"
      summary: "Get database restores"
      description: "Get database restores"
      operationId: "provisioningHostingHosting_nameDatabaseDatabase_nameRestoresGET"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "Hosting account (primary domain)"
        required: true
        type: "string"
      - name: "database_name"
        in: "path"
        description: "Database name"
        required: true
        type: "string"
      responses:
        200:
          description: "Retrieve the restore history for the database"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RestoreInfo"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting or database not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "DatabaseBackup"
    post:
      tags:
      - "DatabaseBackup"
      summary: "Restore database content from the specified backup"
      description: "Restore database content from the specified backup\n"
      operationId: "provisioningHostingHosting_nameDatabaseDatabase_nameRestoresPOST"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "Hosting account (primary domain)"
        required: true
        type: "string"
      - name: "database_name"
        in: "path"
        description: "Database name"
        required: true
        type: "string"
      - in: "body"
        name: "backupInfo"
        description: "The database details."
        required: false
        schema:
          $ref: "#/definitions/backupInfo"
      responses:
        202:
          description: "Restore the backup content into database"
          schema:
            $ref: "#/definitions/FabricTask"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting or database not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "DatabaseBackup"
  /provisioning/hosting/{hosting_name}/database/users:
    get:
      tags:
      - "DatabaseUsers"
      summary: "Retrieve a list of database users"
      description: "Retrieve the list of database users for a hosting account\n"
      operationId: "provisioningHostingHosting_nameDatabaseUsersGET"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "Hosting account (primary domain)"
        required: true
        type: "string"
      responses:
        200:
          description: "Retrieve the list of database users for a hosting account"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DatabaseUserInfo"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "DatabaseUsers"
    post:
      tags:
      - "DatabaseUsers"
      summary: "Create a database user (user on the database cluster)"
      description: "Create a new database user\n"
      operationId: "provisioningHostingHosting_nameDatabaseUsersPOST"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "Hosting account (primary domain)"
        required: true
        type: "string"
      - in: "body"
        name: "user_info"
        description: "The database user details"
        required: false
        schema:
          $ref: "#/definitions/user_info"
      responses:
        202:
          description: "Create a database user on cluster with specified grant permissions"
          schema:
            $ref: "#/definitions/FabricTask"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting not found"
        409:
          description: "Specified db_username already exists"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "DatabaseUsers"
  /provisioning/hosting/{hosting_name}/database/user/{db_username}:
    get:
      tags:
      - "DatabaseUsers"
      summary: "Get an existing database user"
      operationId: "provisioningHostingHosting_nameDatabaseUserDb_usernameGET"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      - name: "db_username"
        in: "path"
        description: "user identifier"
        required: true
        type: "string"
      responses:
        200:
          description: "Get an existing database user"
          schema:
            $ref: "#/definitions/DatabaseUserInfo"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting or database user not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "DatabaseUsers"
    put:
      tags:
      - "DatabaseUsers"
      summary: "Update an existing database user"
      description: "Update an existing database user"
      operationId: "provisioningHostingHosting_nameDatabaseUserDb_usernamePUT"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "Hosting account (primary domain)"
        required: true
        type: "string"
      - name: "db_username"
        in: "path"
        description: "User identifier"
        required: true
        type: "string"
      - in: "body"
        name: "user_info"
        description: "The database user details"
        required: false
        schema:
          $ref: "#/definitions/user_info_1"
      responses:
        200:
          description: "Update an existing database user"
          schema:
            $ref: "#/definitions/FabricTask"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting or database user not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "DatabaseUsers"
    delete:
      tags:
      - "DatabaseUsers"
      summary: "Delete an existing database user"
      operationId: "provisioningHostingHosting_nameDatabaseUserDb_usernameDELETE"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "Hosting account (primary domain)"
        required: true
        type: "string"
      - name: "db_username"
        in: "path"
        description: "User identifier"
        required: true
        type: "string"
      responses:
        200:
          description: "Delete an existing database user"
          schema:
            $ref: "#/definitions/FabricTask"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting or database user not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "DatabaseUsers"
  /provisioning/hosting/{hosting_name}/backup:
    get:
      tags:
      - "Backup"
      summary: "Get the list of backups"
      description: "Get list of available webspace backups\n"
      operationId: "provisioningHostingHosting_nameBackupGET"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      responses:
        200:
          description: "List of available hosting backups"
          schema:
            $ref: "#/definitions/BackupInfo"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Backup"
    post:
      tags:
      - "Backup"
      summary: "Backup the webspace of the hosting account"
      description: "Create a webspace backup with specified parameters. Platform will\
        \ manage the backup location and archives file(s)\n"
      operationId: "provisioningHostingHosting_nameBackupPOST"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      - in: "body"
        name: "backup_source"
        description: "Path to folders to backup (if root, then full backup)"
        required: false
        schema:
          $ref: "#/definitions/backup_source"
      responses:
        200:
          description: "Backup current webspace"
          schema:
            $ref: "#/definitions/FabricTask"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Backup"
  /provisioning/hosting/{hosting_name}/restore:
    get:
      tags:
      - "Backup"
      summary: "Get hosting restoration history/logs"
      description: "Get hosting restoration history/logs"
      operationId: "provisioningHostingHosting_nameRestoreGET"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      responses:
        200:
          description: "Retrieve the hosting restoration history, the log of the unzip/write\
            \ operation"
          schema:
            $ref: "#/definitions/RestoreInfo"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Backup"
    post:
      tags:
      - "Backup"
      summary: "Restore webspace content from specified backup file."
      description: "Restore a webspace backup from specified archive.\n"
      operationId: "provisioningHostingHosting_nameRestorePOST"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      - in: "body"
        name: "restore_from"
        description: "If not provided then restore last backup file"
        required: false
        schema:
          $ref: "#/definitions/restore_from"
      responses:
        200:
          description: "Restore current webspace"
          schema:
            $ref: "#/definitions/FabricTask"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Backup"
  /provisioning/misc/{hosting_name}/ls/{depth}:
    get:
      tags:
      - "Misc"
      summary: "Retrieve list of dirs starting from hosting's root folder"
      description: "Retrieve list of dirs starting from hosting's root folder"
      operationId: "provisioningMiscHosting_nameLsDepthGET"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      - name: "depth"
        in: "path"
        description: "depth level of folders to display"
        required: true
        type: "integer"
      responses:
        200:
          description: "List of hierarchy dirs (JSON)"
          schema:
            type: "string"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Misc"
  /provisioning/misc/{hosting_name}/security/access:
    get:
      tags:
      - "Misc"
      summary: "Retrieve list of IP access security rules"
      description: "Retrieve list of IP access security rules"
      operationId: "provisioningMiscHosting_nameSecurityAccessGET"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      responses:
        200:
          description: "list of IP Security Rules"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IPSecurity"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Misc"
    post:
      tags:
      - "Misc"
      summary: "Add IP access security rule"
      description: "Add IP access security rule"
      operationId: "provisioningMiscHosting_nameSecurityAccessPOST"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      - in: "body"
        name: "security_rule"
        description: "Security rule details"
        required: true
        schema:
          $ref: "#/definitions/security_rule"
      responses:
        200:
          description: "Identifier for new rule"
          schema:
            type: "string"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Misc"
  /provisioning/misc/{hosting_name}/security/access/{rule_id}:
    put:
      tags:
      - "Misc"
      summary: "Modify IP access security rule"
      description: "Modify IP access security rule"
      operationId: "provisioningMiscHosting_nameSecurityAccessRule_idPUT"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      - name: "rule_id"
        in: "path"
        description: "ip rule identifier"
        required: true
        type: "string"
      - in: "body"
        name: "security_rule"
        description: "Security rule updates"
        required: true
        schema:
          $ref: "#/definitions/security_rule_1"
      responses:
        200:
          description: "Rule was updated"
          schema:
            type: "string"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting or security rule not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Misc"
    delete:
      tags:
      - "Misc"
      summary: "Remove IP access security rule"
      description: "Remove IP access security rule"
      operationId: "provisioningMiscHosting_nameSecurityAccessRule_idDELETE"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      - name: "rule_id"
        in: "path"
        description: "ip rule identifier"
        required: true
        type: "string"
      responses:
        200:
          description: "Security rule was deleted"
          schema:
            type: "string"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting or security rule not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Misc"
  /provisioning/misc/{hosting_name}/iis_settings:
    get:
      tags:
      - "Misc"
      summary: "Get IIS settings for hosting account"
      description: "Get IIS settings settings"
      operationId: "provisioningMiscHosting_nameIis_settingsGET"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/AppPoolInfo"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Misc"
    put:
      tags:
      - "Misc"
      summary: "Update an IIS Setting"
      operationId: "provisioningMiscHosting_nameIis_settingsPUT"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - name: "hosting_name"
        in: "path"
        description: "hosting account (primary domain)"
        required: true
        type: "string"
      - in: "body"
        name: "iis_settings"
        description: "IIS Settings"
        required: true
        schema:
          $ref: "#/definitions/iis_settings"
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
        401:
          description: "Invalid authorization token"
        404:
          description: "Hosting not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Misc"
  /ping:
    get:
      tags:
      - "HealthCheck"
      summary: "Server heartbeat operation"
      description: "Server heartbeat operation"
      operationId: "pingGET"
      parameters: []
      responses:
        200:
          description: "OK"
      x-swagger-router-controller: "HealthCheck"
definitions:
  FabricTask:
    type: "object"
    required:
    - "_utid"
    properties:
      _utid:
        type: "string"
        format: "uuid"
        example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        description: "Fabric task identifier"
      status:
        type: "string"
        example: "pending"
        description: "Fabric task status/progress"
        enum:
        - "pending"
        - "completed"
        - "error"
  QuotaInfo:
    type: "object"
    properties:
      max_available:
        type: "integer"
        format: "int64"
        description: "Quota value for feature 'x'"
      consumed:
        type: "integer"
        format: "int64"
        description: "Consumed value for feature 'x'"
      details:
        type: "string"
        description: "Quota meaning / measure unit (eg. MB)."
  Error:
    type: "object"
    required:
    - "code"
    - "message"
    properties:
      code:
        type: "number"
      message:
        type: "string"
      description:
        type: "string"
    example:
      code: 1001
      message: "This is an error message"
      description: "failed at line: 20"
  HostingAccount:
    type: "object"
    required:
    - "hosting_account_id"
    - "hosting_name"
    properties:
      hosting_account_id:
        type: "integer"
        format: "int64"
        description: "Fabric hosting_acount_id (PK)"
        readOnly: true
      hosting_name:
        type: "string"
        description: "hosting account (primary domain)"
      ftp_quota:
        $ref: "#/definitions/QuotaInfo"
      disk_quota:
        $ref: "#/definitions/QuotaInfo"
      bandwidth_quota:
        $ref: "#/definitions/QuotaInfo"
      stats_json_url:
        type: "string"
        description: "json endpoint to for chart data"
      region:
        type: "string"
        description: "optional, specify the region of provisioning (datacenter)"
    example:
      hosting_account_id: 123456
      hosting_name: "example.com"
      ftp_quota:
        max_available: 20
        consumed: 0
      disk_quota:
        max_available: 10240
        consumed: 50
        description: "MB"
      bandwidth_quota:
        max_available: 0
        description: "0=unlimited"
      stats_json_url: "https://stats.atlas-hosting.com?hosting-name=\"example.com\""
  HostingAccountStatus:
    type: "object"
    properties:
      status:
        type: "string"
        description: "HostingAccount status"
        enum:
        - "enabled"
        - "disabled"
      comments:
        type: "string"
        description: "Reason of enable/disable change"
    example:
      status: "enabled"
      comments: "Enabled after successful payment"
  FtpUserInfo:
    type: "object"
    properties:
      user_id:
        type: "string"
        description: "FTP user unique identifier"
      username:
        type: "string"
        example: "admin@example.com"
        description: "FTP username"
      quota:
        type: "integer"
        example: 200
        description: "FTP account quota"
      ftp_path:
        type: "string"
        description: "FTP account directory"
    example:
      user_id: 12345
      username: "ftp@example.com"
      quota: 200
      ftp_path: "/www-data"
  DatabaseInfo:
    type: "object"
    properties:
      database_id:
        type: "integer"
        format: "int64"
        description: "Database unique identifier"
      database_name:
        type: "string"
        description: "Database name"
      database_cluster:
        type: "string"
        description: "Database cluster"
      engine_type:
        type: "string"
        description: "Database engine type"
      db_size:
        type: "integer"
        description: "Database max size (MB)"
      db_actual_size:
        type: "integer"
        description: "Database actual size (MB)"
      db_users:
        type: "array"
        items:
          $ref: "#/definitions/DatabaseUserInfo"
      db_connection:
        type: "string"
        description: "Friendly DB connection string (eg. ssl, port, etc)"
    example:
      database_id: 123456
      database_name: "example-db"
      database_cluster: "cluster-mysql-01"
      engine_type: "Mysql"
      db_size: 1024
      db_actual_size: 2
      db_users:
      - db_user: "user_001"
      - db_user: "user_002"
      - db_user: "user_003"
      db_connection: "Server=cluster-mysql-01;Database=example-db;Uid=db-user;Pwd=secret;"
  DatabaseUserInfo:
    type: "object"
    properties:
      db_user:
        type: "string"
        description: "Database user identifier"
      password:
        type: "string"
      grants:
        type: "array"
        items:
          $ref: "#/definitions/Grant"
    example:
      db_user: 1234
      password: "secret"
      grants:
      - database_name: "example-db"
        permissions: "read"
      - database_name: "example-db"
        permissions: "write"
  Grant:
    type: "object"
    properties:
      database_name:
        type: "string"
        description: "Database identifier"
      permissions:
        type: "string"
        description: "Grant details"
        enum:
        - "read"
        - "write"
        - "admin"
    example:
      database_name: "example-db"
      permissions: "admin"
  BackupInfo:
    type: "object"
    properties:
      file_name:
        type: "string"
        description: "backup name"
      source_type:
        type: "string"
        description: "Webspace or database backup"
        enum:
        - "storage"
        - "database"
      status:
        type: "string"
        description: "operation status"
        enum:
        - "completed"
        - "inprogress"
        - "error"
      completed_date:
        type: "string"
        format: "date-time"
    example:
      file_name: "2017-01-01-www.example.com.tar.gz"
      source_type: "storage"
      status: "completed"
      completed_date: "2017-01-01T23:20:50.52Z"
      log_file: "restore-2017-01-01-www.example.com.log"
  RestoreInfo:
    allOf:
    - $ref: "#/definitions/BackupInfo"
    - properties:
        error:
          type: "string"
          description: "the error details if the restore failed"
        log_file:
          type: "string"
          description: "the log file for the restore operation"
  IPSecurity:
    type: "object"
    properties:
      rule_id:
        type: "integer"
        format: "int64"
        description: "Access rule identifier"
      ip_source:
        type: "string"
        description: "IP Address"
      access_type:
        type: "string"
        description: "Access Type"
        enum:
        - "allow"
        - "deny"
    example:
      rule_id: 4332233
      ip_source: "127.0.0.1/24"
      access_type: "allow"
  AppPoolInfo:
    type: "object"
    properties:
      app_name:
        type: "string"
      pipeline:
        type: "string"
        description: "type"
        enum:
        - "classic"
        - "managed"
      clr_version:
        type: "string"
        description: "runtime"
        enum:
        - "v1.1"
        - "v2.0"
        - "v4.0"
      status:
        type: "string"
        description: "status"
        enum:
        - "Running"
        - "Uninitialized"
        - "Initialized"
        - "Disabling"
        - "Disabled"
        - "Shutdown Pending"
        - "Delete Pending"
    example:
      app_name: "wwww.example.com"
      pipeline: "Managed"
      clr_version: "v4.0"
      status: "Running"
  hostingAccount:
    type: "object"
    required:
    - "bandwidth_quota"
    - "db_max_size"
    - "db_quota"
    - "disk_quota"
    - "ftp_quota"
    - "hosting_admin_email"
    - "hosting_name"
    properties:
      hosting_name:
        type: "string"
        description: "hosting account (primary domain)"
      hosting_admin_email:
        type: "string"
        description: "admin email for hosting account"
      disk_quota:
        type: "integer"
        format: "int64"
        description: "webspace quota MB (0=unlimited)"
        minimum: 0
      ftp_quota:
        type: "integer"
        format: "int32"
        description: "max number of FTP users (0=unlimited)"
        minimum: 0
        maximum: 100
      bandwidth_quota:
        type: "integer"
        format: "int64"
        description: "bandwidth quota MB (0=unlimited)"
        minimum: 0
      db_quota:
        type: "integer"
        format: "int32"
        description: "max number of databases (0=unlimited)"
        minimum: 0
        maximum: 999
      db_max_size:
        type: "integer"
        format: "int64"
        description: "max database file size (MB)"
        minimum: 0
      region:
        type: "string"
        description: "optional, specify the region of provisioning (datacenter)"
    example:
      hosting_name: "example.com"
      hosting_admin_email: "admin@example.com"
      disk_quota: 10240
      ftp_quota: 100
      bandwidth_quota: 0
      db_quota: 10
      db_max_size: 1024
      region: "GB"
  hosting_account:
    type: "object"
    properties:
      hosting_admin_email:
        type: "string"
        description: "admin email for hosting account"
      disk_quota:
        type: "integer"
        format: "int64"
        description: "webspace quota MB (0=unlimited)"
        minimum: 0
      ftp_quota:
        type: "integer"
        format: "int32"
        description: "max number of FTP users (0=unlimited)"
        minimum: 0
        maximum: 100
      bandwidth_quota:
        type: "integer"
        format: "int64"
        description: "bandwidth quota MB (0=unlimited)"
        minimum: 0
      db_quota:
        type: "integer"
        format: "int32"
        description: "max number of databases (0=unlimited)"
        minimum: 0
        maximum: 999
      db_max_size:
        type: "integer"
        format: "int64"
        description: "max database file size (MB)"
        minimum: 0
      region:
        type: "string"
        description: "optional, specify the region of provisioning (datacenter)"
    example:
      hosting_admin_email: "admin_changed@example.com"
      disk_quota: 20480
      ftp_quota: 0
      bandwidth_quota: 0
      db_quota: 0
      db_max_size: 1024
      region: "GB"
  ftpUser:
    type: "object"
    properties:
      username:
        type: "string"
        description: "Ftp username"
      quota:
        type: "integer"
        description: "Ftp account quota"
      ftp_path:
        type: "string"
        description: "Ftp account directory"
    example:
      username: "ftp@example.com"
      quota: 200
      ftp_path: "/www-data"
  ftpUser_1:
    type: "object"
    properties:
      username:
        type: "string"
        description: "Ftp username"
      quota:
        type: "integer"
        description: "Ftp account quota"
      ftp_path:
        type: "string"
        description: "Ftp account directory"
    example:
      username: "ftp_changed@example.com"
      quota: 500
      ftp_path: "/www-data"
  database_info:
    type: "object"
    required:
    - "database_name"
    - "database_type"
    - "db_size"
    - "db_user"
    properties:
      database_name:
        type: "string"
        description: "Database name"
      db_user:
        type: "string"
        description: "Database username"
      database_type:
        type: "string"
        description: "Database Engine. Default MSSQL ?"
        enum:
        - "MSsql"
        - "Mysql"
      db_size:
        type: "integer"
        format: "int64"
        description: "Max database size"
    example:
      database_name: "db_example"
      database_type: "Mysql"
      db_user: "user_001"
      db_size: 1024
  databaseInfo:
    type: "object"
    required:
    - "db_size"
    - "db_users"
    properties:
      db_users:
        type: "array"
        description: "Array of database users"
        items:
          type: "string"
          description: "database username"
      db_size:
        type: "integer"
        format: "int64"
        description: "Max database size"
    example:
      db_users:
      - "user_001"
      - "user_002"
      db_size: 1024
  backupInfo:
    type: "object"
    properties:
      file_name:
        type: "string"
        description: "Database backup file"
  user_info:
    type: "object"
    required:
    - "db_username"
    properties:
      db_username:
        type: "string"
        description: "database username"
      password:
        type: "string"
        description: "password (autogenerated if not provided)"
      grant:
        type: "array"
        description: "grant type list"
        items:
          type: "string"
          enum:
          - "read"
          - "write"
          - "admin"
    example:
      db_username: "user_001"
      grant:
      - "admin"
      - "write"
  user_info_1:
    type: "object"
    properties:
      password:
        type: "string"
        description: "password (autogenerated if not provided)"
      grant:
        type: "array"
        description: "grant type list"
        items:
          type: "string"
          enum:
          - "read"
          - "write"
          - "admin"
    example:
      password: "mystrongpassword"
      grant:
      - "admin"
      - "write"
  backup_source:
    type: "object"
    properties:
      paths:
        type: "array"
        description: "Array of paths to be backup"
        items:
          type: "string"
    example:
      paths:
      - "file1.txt"
      - "/dir/file2.txt"
  restore_from:
    type: "object"
    properties:
      file_name:
        type: "string"
        description: "the filename of the restore file"
    example:
      file_name: "2017-01-01-www.example.com.tar.gz"
  security_rule:
    type: "object"
    properties:
      ip_source:
        type: "string"
        description: "source ip of the request"
      access_type:
        type: "string"
        description: "Allow or Deny"
        enum:
        - "allow"
        - "deny"
    example:
      ip_source: "127.0.0.1/24"
      access_type: "allow"
  security_rule_1:
    type: "object"
    properties:
      ip_source:
        type: "string"
        description: "source ip of the request"
      access_type:
        type: "string"
        description: "Allow or Deny"
        enum:
        - "allow"
        - "deny"
    example:
      ip_source: "192.168.0.0/24"
      access_type: "deny"
  iis_settings:
    type: "object"
    properties:
      pipeline:
        type: "string"
        description: "type"
        enum:
        - "classic"
        - "managed"
      clr_version:
        type: "string"
        description: "runtime"
        enum:
        - "v1.1"
        - "v2.0"
        - "v4.0"
      status:
        type: "string"
        description: "status"
        enum:
        - "Running"
        - "Disabled"
    example:
      pipeline: "classic"
      clr_version: "v4.0"
      status: "Running"
