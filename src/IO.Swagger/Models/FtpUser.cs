/*
 * Wish Fabric.Core Api - Middleware to Fabric.Core
 *
 * Wish Fabric.Core API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FtpUser :  IEquatable<FtpUser>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FtpUser" /> class.
        /// </summary>
        /// <param name="Username">Ftp username.</param>
        /// <param name="Quota">Ftp account quota.</param>
        /// <param name="FtpPath">Ftp account directory.</param>
        public FtpUser(string Username = null, int? Quota = null, string FtpPath = null)
        {
            this.Username = Username;
            this.Quota = Quota;
            this.FtpPath = FtpPath;
            
        }

        /// <summary>
        /// Ftp username
        /// </summary>
        /// <value>Ftp username</value>
        [DataMember(Name="username")]
        public string Username { get; set; }

        /// <summary>
        /// Ftp account quota
        /// </summary>
        /// <value>Ftp account quota</value>
        [DataMember(Name="quota")]
        public int? Quota { get; set; }

        /// <summary>
        /// Ftp account directory
        /// </summary>
        /// <value>Ftp account directory</value>
        [DataMember(Name="ftp_path")]
        public string FtpPath { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FtpUser {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Quota: ").Append(Quota).Append("\n");
            sb.Append("  FtpPath: ").Append(FtpPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((FtpUser)obj);
        }

        /// <summary>
        /// Returns true if FtpUser instances are equal
        /// </summary>
        /// <param name="other">Instance of FtpUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FtpUser other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Username == other.Username ||
                    this.Username != null &&
                    this.Username.Equals(other.Username)
                ) && 
                (
                    this.Quota == other.Quota ||
                    this.Quota != null &&
                    this.Quota.Equals(other.Quota)
                ) && 
                (
                    this.FtpPath == other.FtpPath ||
                    this.FtpPath != null &&
                    this.FtpPath.Equals(other.FtpPath)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Username != null)
                    hash = hash * 59 + this.Username.GetHashCode();
                if (this.Quota != null)
                    hash = hash * 59 + this.Quota.GetHashCode();
                if (this.FtpPath != null)
                    hash = hash * 59 + this.FtpPath.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(FtpUser left, FtpUser right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FtpUser left, FtpUser right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
