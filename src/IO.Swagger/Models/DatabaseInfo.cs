/*
 * Wish Fabric.Core Api - Middleware to Fabric.Core
 *
 * Wish Fabric.Core API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DatabaseInfo :  IEquatable<DatabaseInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatabaseInfo" /> class.
        /// </summary>
        /// <param name="DatabaseName">Database name (required).</param>
        /// <param name="DbUser">Database username.</param>
        /// <param name="DatabaseType">Database Engine. Default MSSQL ?.</param>
        /// <param name="DbSize">Max database size.</param>
        public DatabaseInfo(string DatabaseName = null, string DbUser = null, string DatabaseType = null, long? DbSize = null)
        {
            // to ensure "DatabaseName" is required (not null)
            if (DatabaseName == null)
            {
                throw new InvalidDataException("DatabaseName is a required property for DatabaseInfo and cannot be null");
            }
            else
            {
                this.DatabaseName = DatabaseName;
            }
            this.DbUser = DbUser;
            this.DatabaseType = DatabaseType;
            this.DbSize = DbSize;
            
        }

        /// <summary>
        /// Database name
        /// </summary>
        /// <value>Database name</value>
        [DataMember(Name="database_name")]
        public string DatabaseName { get; set; }

        /// <summary>
        /// Database username
        /// </summary>
        /// <value>Database username</value>
        [DataMember(Name="db_user")]
        public string DbUser { get; set; }

        /// <summary>
        /// Database Engine. Default MSSQL ?
        /// </summary>
        /// <value>Database Engine. Default MSSQL ?</value>
        [DataMember(Name="database_type")]
        public string DatabaseType { get; set; }

        /// <summary>
        /// Max database size
        /// </summary>
        /// <value>Max database size</value>
        [DataMember(Name="db_size")]
        public long? DbSize { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatabaseInfo {\n");
            sb.Append("  DatabaseName: ").Append(DatabaseName).Append("\n");
            sb.Append("  DbUser: ").Append(DbUser).Append("\n");
            sb.Append("  DatabaseType: ").Append(DatabaseType).Append("\n");
            sb.Append("  DbSize: ").Append(DbSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((DatabaseInfo)obj);
        }

        /// <summary>
        /// Returns true if DatabaseInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of DatabaseInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatabaseInfo other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.DatabaseName == other.DatabaseName ||
                    this.DatabaseName != null &&
                    this.DatabaseName.Equals(other.DatabaseName)
                ) && 
                (
                    this.DbUser == other.DbUser ||
                    this.DbUser != null &&
                    this.DbUser.Equals(other.DbUser)
                ) && 
                (
                    this.DatabaseType == other.DatabaseType ||
                    this.DatabaseType != null &&
                    this.DatabaseType.Equals(other.DatabaseType)
                ) && 
                (
                    this.DbSize == other.DbSize ||
                    this.DbSize != null &&
                    this.DbSize.Equals(other.DbSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DatabaseName != null)
                    hash = hash * 59 + this.DatabaseName.GetHashCode();
                if (this.DbUser != null)
                    hash = hash * 59 + this.DbUser.GetHashCode();
                if (this.DatabaseType != null)
                    hash = hash * 59 + this.DatabaseType.GetHashCode();
                if (this.DbSize != null)
                    hash = hash * 59 + this.DbSize.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(DatabaseInfo left, DatabaseInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DatabaseInfo left, DatabaseInfo right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
