/*
 * Wish Fabric.Core Api - Middleware to Fabric.Core
 *
 * Wish Fabric.Core API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class HostingAccount1 :  IEquatable<HostingAccount1>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HostingAccount1" /> class.
        /// </summary>
        /// <param name="HostingAdminEmail">admin email for hosting account.</param>
        /// <param name="DiskQuota">webspace quota MB (0&#x3D;unlimited).</param>
        /// <param name="FtpQuota">max number of FTP users (0&#x3D;unlimited).</param>
        /// <param name="BandwidthQuota">bandwidth quota MB (0&#x3D;unlimited).</param>
        /// <param name="DbQuota">max number of databases (0&#x3D;unlimited).</param>
        /// <param name="DbMaxSize">max database file size (MB).</param>
        public HostingAccount1(string HostingAdminEmail = null, long? DiskQuota = null, int? FtpQuota = null, long? BandwidthQuota = null, int? DbQuota = null, long? DbMaxSize = null)
        {
            this.HostingAdminEmail = HostingAdminEmail;
            this.DiskQuota = DiskQuota;
            this.FtpQuota = FtpQuota;
            this.BandwidthQuota = BandwidthQuota;
            this.DbQuota = DbQuota;
            this.DbMaxSize = DbMaxSize;
            
        }

        /// <summary>
        /// admin email for hosting account
        /// </summary>
        /// <value>admin email for hosting account</value>
        [DataMember(Name="hosting_admin_email")]
        public string HostingAdminEmail { get; set; }

        /// <summary>
        /// webspace quota MB (0=unlimited)
        /// </summary>
        /// <value>webspace quota MB (0=unlimited)</value>
        [DataMember(Name="disk_quota")]
        public long? DiskQuota { get; set; }

        /// <summary>
        /// max number of FTP users (0=unlimited)
        /// </summary>
        /// <value>max number of FTP users (0=unlimited)</value>
        [DataMember(Name="ftp_quota")]
        public int? FtpQuota { get; set; }

        /// <summary>
        /// bandwidth quota MB (0=unlimited)
        /// </summary>
        /// <value>bandwidth quota MB (0=unlimited)</value>
        [DataMember(Name="bandwidth_quota")]
        public long? BandwidthQuota { get; set; }

        /// <summary>
        /// max number of databases (0=unlimited)
        /// </summary>
        /// <value>max number of databases (0=unlimited)</value>
        [DataMember(Name="db_quota")]
        public int? DbQuota { get; set; }

        /// <summary>
        /// max database file size (MB)
        /// </summary>
        /// <value>max database file size (MB)</value>
        [DataMember(Name="db_max_size")]
        public long? DbMaxSize { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HostingAccount1 {\n");
            sb.Append("  HostingAdminEmail: ").Append(HostingAdminEmail).Append("\n");
            sb.Append("  DiskQuota: ").Append(DiskQuota).Append("\n");
            sb.Append("  FtpQuota: ").Append(FtpQuota).Append("\n");
            sb.Append("  BandwidthQuota: ").Append(BandwidthQuota).Append("\n");
            sb.Append("  DbQuota: ").Append(DbQuota).Append("\n");
            sb.Append("  DbMaxSize: ").Append(DbMaxSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((HostingAccount1)obj);
        }

        /// <summary>
        /// Returns true if HostingAccount1 instances are equal
        /// </summary>
        /// <param name="other">Instance of HostingAccount1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HostingAccount1 other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.HostingAdminEmail == other.HostingAdminEmail ||
                    this.HostingAdminEmail != null &&
                    this.HostingAdminEmail.Equals(other.HostingAdminEmail)
                ) && 
                (
                    this.DiskQuota == other.DiskQuota ||
                    this.DiskQuota != null &&
                    this.DiskQuota.Equals(other.DiskQuota)
                ) && 
                (
                    this.FtpQuota == other.FtpQuota ||
                    this.FtpQuota != null &&
                    this.FtpQuota.Equals(other.FtpQuota)
                ) && 
                (
                    this.BandwidthQuota == other.BandwidthQuota ||
                    this.BandwidthQuota != null &&
                    this.BandwidthQuota.Equals(other.BandwidthQuota)
                ) && 
                (
                    this.DbQuota == other.DbQuota ||
                    this.DbQuota != null &&
                    this.DbQuota.Equals(other.DbQuota)
                ) && 
                (
                    this.DbMaxSize == other.DbMaxSize ||
                    this.DbMaxSize != null &&
                    this.DbMaxSize.Equals(other.DbMaxSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.HostingAdminEmail != null)
                    hash = hash * 59 + this.HostingAdminEmail.GetHashCode();
                if (this.DiskQuota != null)
                    hash = hash * 59 + this.DiskQuota.GetHashCode();
                if (this.FtpQuota != null)
                    hash = hash * 59 + this.FtpQuota.GetHashCode();
                if (this.BandwidthQuota != null)
                    hash = hash * 59 + this.BandwidthQuota.GetHashCode();
                if (this.DbQuota != null)
                    hash = hash * 59 + this.DbQuota.GetHashCode();
                if (this.DbMaxSize != null)
                    hash = hash * 59 + this.DbMaxSize.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(HostingAccount1 left, HostingAccount1 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HostingAccount1 left, HostingAccount1 right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
