/*
 * Wish Fabric.Core Api - Middleware to Fabric.Core
 *
 * Wish Fabric.Core API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class HostingAccountApiController : Controller
    { 

        /// <summary>
        /// Provision a hosting account
        /// </summary>
        /// <remarks>This will search for an active provision engine and launch a task to provision a hosting account with specified parameters.</remarks>
        /// <param name="authorization">Access token</param>
        /// <param name="hostingAccount">The hosting account details with package quotas.</param>
        /// <response code="202">Request is accepted and FabricTask is returned</response>
        /// <response code="400">Invalid input, object invalid</response>
        /// <response code="401">Invalid authorization token</response>
        /// <response code="409">An existing &#39;hosting_name&#39; already exists</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/itabara/Fabric.Core/1.0.0/provisioning/hosting")]
        [SwaggerOperation("CreateHosting")]
        [SwaggerResponse(200, type: typeof(FabricTask))]
        public virtual IActionResult CreateHosting([FromHeader]string authorization, [FromBody]HostingAccount hostingAccount)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FabricTask>(exampleJson)
            : default(FabricTask);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Retrieve hosting account details
        /// </summary>
        /// <remarks>Retrives hosting account details </remarks>
        /// <param name="authorization">Access token</param>
        /// <param name="hostingName">hosting account (primary domain)</param>
        /// <response code="200">HostingAccount details</response>
        /// <response code="401">Invalid authorization token</response>
        /// <response code="404">Failed to get hosting account</response>
        [HttpGet]
        [Route("/itabara/Fabric.Core/1.0.0/provisioning/hosting/{hosting_name}")]
        [SwaggerOperation("GetHosting")]
        [SwaggerResponse(200, type: typeof(HostingAccount))]
        public virtual IActionResult GetHosting([FromHeader]string authorization, [FromRoute]string hostingName)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<HostingAccount>(exampleJson)
            : default(HostingAccount);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Retrive HostingAccount status
        /// </summary>
        /// <remarks>Get the status of HostingAccount </remarks>
        /// <param name="authorization">Access token</param>
        /// <param name="hostingName">hosting account (primary domain)</param>
        /// <response code="200">Retrieve HostingAccount status</response>
        /// <response code="401">Invalid authorization token</response>
        /// <response code="404">Failed to get hosting account</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/itabara/Fabric.Core/1.0.0/provisioning/hosting/{hosting_name}/status")]
        [SwaggerOperation("GetHostingStatus")]
        [SwaggerResponse(200, type: typeof(HostingAccountStatus))]
        public virtual IActionResult GetHostingStatus([FromHeader]string authorization, [FromRoute]string hostingName)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<HostingAccountStatus>(exampleJson)
            : default(HostingAccountStatus);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete hosting account
        /// </summary>
        /// <remarks>This will remove the hosting account. </remarks>
        /// <param name="hostingName">hosting account name (primary domain)</param>
        /// <param name="authorization">Access token</param>
        /// <response code="202">FabricTask task details</response>
        /// <response code="401">Invalid authorization token</response>
        /// <response code="404">Failed to get hosting account</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/itabara/Fabric.Core/1.0.0/provisioning/hosting/{hosting_name}")]
        [SwaggerOperation("ProvisioningHostingHostingNameDelete")]
        [SwaggerResponse(200, type: typeof(FabricTask))]
        public virtual IActionResult ProvisioningHostingHostingNameDelete([FromRoute]string hostingName, [FromHeader]string authorization)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FabricTask>(exampleJson)
            : default(FabricTask);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Allow disk quotas change. Potentially to be used to move HostingAccount to another cluster.
        /// </summary>
        
        /// <param name="authorization">Access token</param>
        /// <param name="hostingAccount">The hosting account details with package quotas.</param>
        /// <response code="202">FabricTask task details</response>
        /// <response code="401">Invalid authorization token</response>
        /// <response code="404">Failed to get hosting account</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/itabara/Fabric.Core/1.0.0/provisioning/hosting/{hosting_name}")]
        [SwaggerOperation("ProvisioningHostingHostingNamePut")]
        [SwaggerResponse(200, type: typeof(FabricTask))]
        public virtual IActionResult ProvisioningHostingHostingNamePut([FromHeader]string authorization, [FromBody]HostingAccount1 hostingAccount)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FabricTask>(exampleJson)
            : default(FabricTask);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Enable/Disable the HostingAccount
        /// </summary>
        /// <remarks>It enable/disable the HostingAccount </remarks>
        /// <param name="authorization">Access token</param>
        /// <param name="hostingName">hosting account (primary domain)</param>
        /// <param name="status">change hosting account status (enable/disable)</param>
        /// <response code="200">Change HostingAccount status</response>
        /// <response code="401">Invalid authorization token</response>
        /// <response code="404">Failed to get hosting account</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/itabara/Fabric.Core/1.0.0/provisioning/hosting/{hosting_name}/status")]
        [SwaggerOperation("SetHostingStatus")]
        [SwaggerResponse(200, type: typeof(FabricTask))]
        public virtual IActionResult SetHostingStatus([FromHeader]string authorization, [FromRoute]string hostingName, [FromBody]HostingAccountStatus status)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FabricTask>(exampleJson)
            : default(FabricTask);
            return new ObjectResult(example);
        }
    }
}
