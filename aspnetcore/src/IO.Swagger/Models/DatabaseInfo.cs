/*
 * Wish Fabric Api - Middleware to Fabric
 *
 * Wish Fabric API (Integration)
 *
 * OpenAPI spec version: 1.0.1
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DatabaseInfo :  IEquatable<DatabaseInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatabaseInfo" /> class.
        /// </summary>
        /// <param name="DatabaseId">Database unique identifier (required).</param>
        /// <param name="DatabaseName">Database name (required).</param>
        /// <param name="DatabaseCluster">Database cluster.</param>
        /// <param name="EngineType">Database engine type.</param>
        /// <param name="DbSize">Database max size (MB).</param>
        /// <param name="DbActualSize">Database actual size (MB).</param>
        /// <param name="Users">Users.</param>
        /// <param name="DbConnection">Friendly DB connection string (eg. ssl, port, etc).</param>
        public DatabaseInfo(long? DatabaseId = null, string DatabaseName = null, string DatabaseCluster = null, string EngineType = null, int? DbSize = null, int? DbActualSize = null, List<DatabaseUserInfo> Users = null, string DbConnection = null)
        {
            // to ensure "DatabaseId" is required (not null)
            if (DatabaseId == null)
            {
                throw new InvalidDataException("DatabaseId is a required property for DatabaseInfo and cannot be null");
            }
            else
            {
                this.DatabaseId = DatabaseId;
            }
            // to ensure "DatabaseName" is required (not null)
            if (DatabaseName == null)
            {
                throw new InvalidDataException("DatabaseName is a required property for DatabaseInfo and cannot be null");
            }
            else
            {
                this.DatabaseName = DatabaseName;
            }
            this.DatabaseCluster = DatabaseCluster;
            this.EngineType = EngineType;
            this.DbSize = DbSize;
            this.DbActualSize = DbActualSize;
            this.Users = Users;
            this.DbConnection = DbConnection;
            
        }

        /// <summary>
        /// Database unique identifier
        /// </summary>
        /// <value>Database unique identifier</value>
        [DataMember(Name="database_id")]
        public long? DatabaseId { get; set; }

        /// <summary>
        /// Database name
        /// </summary>
        /// <value>Database name</value>
        [DataMember(Name="database_name")]
        public string DatabaseName { get; set; }

        /// <summary>
        /// Database cluster
        /// </summary>
        /// <value>Database cluster</value>
        [DataMember(Name="database_cluster")]
        public string DatabaseCluster { get; set; }

        /// <summary>
        /// Database engine type
        /// </summary>
        /// <value>Database engine type</value>
        [DataMember(Name="engine_type")]
        public string EngineType { get; set; }

        /// <summary>
        /// Database max size (MB)
        /// </summary>
        /// <value>Database max size (MB)</value>
        [DataMember(Name="db_size")]
        public int? DbSize { get; set; }

        /// <summary>
        /// Database actual size (MB)
        /// </summary>
        /// <value>Database actual size (MB)</value>
        [DataMember(Name="db_actual_size")]
        public int? DbActualSize { get; set; }

        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name="users")]
        public List<DatabaseUserInfo> Users { get; set; }

        /// <summary>
        /// Friendly DB connection string (eg. ssl, port, etc)
        /// </summary>
        /// <value>Friendly DB connection string (eg. ssl, port, etc)</value>
        [DataMember(Name="db_connection")]
        public string DbConnection { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatabaseInfo {\n");
            sb.Append("  DatabaseId: ").Append(DatabaseId).Append("\n");
            sb.Append("  DatabaseName: ").Append(DatabaseName).Append("\n");
            sb.Append("  DatabaseCluster: ").Append(DatabaseCluster).Append("\n");
            sb.Append("  EngineType: ").Append(EngineType).Append("\n");
            sb.Append("  DbSize: ").Append(DbSize).Append("\n");
            sb.Append("  DbActualSize: ").Append(DbActualSize).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  DbConnection: ").Append(DbConnection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((DatabaseInfo)obj);
        }

        /// <summary>
        /// Returns true if DatabaseInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of DatabaseInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatabaseInfo other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.DatabaseId == other.DatabaseId ||
                    this.DatabaseId != null &&
                    this.DatabaseId.Equals(other.DatabaseId)
                ) && 
                (
                    this.DatabaseName == other.DatabaseName ||
                    this.DatabaseName != null &&
                    this.DatabaseName.Equals(other.DatabaseName)
                ) && 
                (
                    this.DatabaseCluster == other.DatabaseCluster ||
                    this.DatabaseCluster != null &&
                    this.DatabaseCluster.Equals(other.DatabaseCluster)
                ) && 
                (
                    this.EngineType == other.EngineType ||
                    this.EngineType != null &&
                    this.EngineType.Equals(other.EngineType)
                ) && 
                (
                    this.DbSize == other.DbSize ||
                    this.DbSize != null &&
                    this.DbSize.Equals(other.DbSize)
                ) && 
                (
                    this.DbActualSize == other.DbActualSize ||
                    this.DbActualSize != null &&
                    this.DbActualSize.Equals(other.DbActualSize)
                ) && 
                (
                    this.Users == other.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(other.Users)
                ) && 
                (
                    this.DbConnection == other.DbConnection ||
                    this.DbConnection != null &&
                    this.DbConnection.Equals(other.DbConnection)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DatabaseId != null)
                    hash = hash * 59 + this.DatabaseId.GetHashCode();
                if (this.DatabaseName != null)
                    hash = hash * 59 + this.DatabaseName.GetHashCode();
                if (this.DatabaseCluster != null)
                    hash = hash * 59 + this.DatabaseCluster.GetHashCode();
                if (this.EngineType != null)
                    hash = hash * 59 + this.EngineType.GetHashCode();
                if (this.DbSize != null)
                    hash = hash * 59 + this.DbSize.GetHashCode();
                if (this.DbActualSize != null)
                    hash = hash * 59 + this.DbActualSize.GetHashCode();
                if (this.Users != null)
                    hash = hash * 59 + this.Users.GetHashCode();
                if (this.DbConnection != null)
                    hash = hash * 59 + this.DbConnection.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(DatabaseInfo left, DatabaseInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DatabaseInfo left, DatabaseInfo right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
