/*
 * Wish Fabric Api - Middleware to Fabric
 *
 * Wish Fabric API (Integration)
 *
 * OpenAPI spec version: 1.0.1
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DatabaseUserUpdate :  IEquatable<DatabaseUserUpdate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatabaseUserUpdate" /> class.
        /// </summary>
        /// <param name="Password">password (autogenerated if not provided).</param>
        /// <param name="Grant">grant type list.</param>
        public DatabaseUserUpdate(string Password = null, List<string> Grant = null)
        {
            this.Password = Password;
            this.Grant = Grant;
            
        }

        /// <summary>
        /// password (autogenerated if not provided)
        /// </summary>
        /// <value>password (autogenerated if not provided)</value>
        [DataMember(Name="password")]
        public string Password { get; set; }

        /// <summary>
        /// grant type list
        /// </summary>
        /// <value>grant type list</value>
        [DataMember(Name="grant")]
        public List<string> Grant { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatabaseUserUpdate {\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Grant: ").Append(Grant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((DatabaseUserUpdate)obj);
        }

        /// <summary>
        /// Returns true if DatabaseUserUpdate instances are equal
        /// </summary>
        /// <param name="other">Instance of DatabaseUserUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatabaseUserUpdate other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.Grant == other.Grant ||
                    this.Grant != null &&
                    this.Grant.SequenceEqual(other.Grant)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.Grant != null)
                    hash = hash * 59 + this.Grant.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(DatabaseUserUpdate left, DatabaseUserUpdate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DatabaseUserUpdate left, DatabaseUserUpdate right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
