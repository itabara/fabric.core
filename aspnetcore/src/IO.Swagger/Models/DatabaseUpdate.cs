/*
 * Wish Fabric Api - Middleware to Fabric
 *
 * Wish Fabric API (Integration)
 *
 * OpenAPI spec version: 1.0.1
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DatabaseUpdate :  IEquatable<DatabaseUpdate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatabaseUpdate" /> class.
        /// </summary>
        /// <param name="DbUsers">Array of database users (required).</param>
        /// <param name="DbSize">Max database size (required).</param>
        public DatabaseUpdate(List<string> DbUsers = null, long? DbSize = null)
        {
            // to ensure "DbUsers" is required (not null)
            if (DbUsers == null)
            {
                throw new InvalidDataException("DbUsers is a required property for DatabaseUpdate and cannot be null");
            }
            else
            {
                this.DbUsers = DbUsers;
            }
            // to ensure "DbSize" is required (not null)
            if (DbSize == null)
            {
                throw new InvalidDataException("DbSize is a required property for DatabaseUpdate and cannot be null");
            }
            else
            {
                this.DbSize = DbSize;
            }
            
        }

        /// <summary>
        /// Array of database users
        /// </summary>
        /// <value>Array of database users</value>
        [DataMember(Name="db_users")]
        public List<string> DbUsers { get; set; }

        /// <summary>
        /// Max database size
        /// </summary>
        /// <value>Max database size</value>
        [DataMember(Name="db_size")]
        public long? DbSize { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatabaseUpdate {\n");
            sb.Append("  DbUsers: ").Append(DbUsers).Append("\n");
            sb.Append("  DbSize: ").Append(DbSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((DatabaseUpdate)obj);
        }

        /// <summary>
        /// Returns true if DatabaseUpdate instances are equal
        /// </summary>
        /// <param name="other">Instance of DatabaseUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatabaseUpdate other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.DbUsers == other.DbUsers ||
                    this.DbUsers != null &&
                    this.DbUsers.SequenceEqual(other.DbUsers)
                ) && 
                (
                    this.DbSize == other.DbSize ||
                    this.DbSize != null &&
                    this.DbSize.Equals(other.DbSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DbUsers != null)
                    hash = hash * 59 + this.DbUsers.GetHashCode();
                if (this.DbSize != null)
                    hash = hash * 59 + this.DbSize.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(DatabaseUpdate left, DatabaseUpdate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DatabaseUpdate left, DatabaseUpdate right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
